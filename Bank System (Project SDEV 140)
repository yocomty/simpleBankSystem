import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import csv
from tkinter import Toplevel

"""Author @ Tyler Y
The purpose of this program is to be a simple bank system. The user can create 
multiple accounts and track there money. It allows the user to withdrawal and deposit 
from their accounts. The program also stores the details of the accounts to a file (accounts.txt)
so a user can exit the program and come back later to update account balances if needed."""


# Main class for the program. Defines variables name, account_number, and balance.
class BankAccount:
    def __init__(self, name, account_number, balance):
        self.name = name  # Account name
        self.account_number = account_number  # Account number
        self.balance = balance  # Account balance


# Function for opening the welcome screen that a user first sees when the program is run.
def open_welcome_screen():
    window = tk.Tk()
    window.title("Welcome")

    # Loading the image into the window
    image = Image.open(r'C:\Users\yocom\PycharmProjects\simpleBankSystem\simpleb.png')
    # Resize the image to a smaller size
    image = image.resize((200, 200))
    photo = ImageTk.PhotoImage(image)

    tk.Label(window, image=photo).pack(pady=10)
    # Adding labels and buttons to the window. I chose the Helvetica text style because I thought it looked the best
    # with the style of the program.
    tk.Label(window, text="Welcome to the Bank", font=("Helvetica", 16, "bold")).pack(pady=20)

    tk.Button(window, text="Create New Account", font=("Helvetica", 12), command=open_create_account_window).pack(
        pady=5)
    tk.Button(window, text="Existing Customer", font=("Helvetica", 12), command=open_existing_customer_window).pack(
        pady=5)
    tk.Button(window, text="Exit", font=("Helvetica", 12), command=window.destroy).pack(pady=5)

    window.mainloop()


# Function for opening the create new account window a user will see.
def open_create_account_window():
    window = tk.Tk()
    window.title("Create Account")
    # Adding labels, text entry boxes, and buttons to the window.
    tk.Label(window, text="Create New Account", font=("Helvetica", 16, "bold")).pack(pady=20)

    name_label = tk.Label(window, text="Name:", font=("Helvetica", 12))
    name_entry = tk.Entry(window, font=("Helvetica", 12))
    account_number_label = tk.Label(window, text="Account Number:", font=("Helvetica", 12))
    account_number_entry = tk.Entry(window, font=("Helvetica", 12))
    balance_label = tk.Label(window, text="Balance:", font=("Helvetica", 12))
    balance_entry = tk.Entry(window, font=("Helvetica", 12))

    name_label.pack()
    name_entry.pack(pady=5)
    account_number_label.pack()
    account_number_entry.pack(pady=5)
    balance_label.pack()
    balance_entry.pack(pady=5)
    # Main button for creating a new account. Gets and stores users entry into the file.
    tk.Button(window, text="Create Account", font=("Helvetica", 12),
              command=lambda: create_account(window, name_entry.get(), account_number_entry.get(),
                                             balance_entry.get())).pack(pady=10)
    tk.Button(window, text="Back", font=("Helvetica", 12), command=window.destroy).pack(pady=10)

    window.mainloop()


# Function for creating an account. This function is used in the create new account window.
def create_account(window, name, account_number, balance):
    # Check if balance is input as integers
    try:
        balance = float(balance)
    except ValueError:
        messagebox.showinfo("Account Creation Failed", "Invalid balance. Please enter a valid number.")
        window.destroy()
        return

    # Check if the account name contains only letters and spaces
    if not all(c.isalpha() or c.isspace() for c in name):
        messagebox.showinfo("Account Creation Failed", "Account name should only contain letters.")
        window.destroy()
        return
    # Check if the account number contains only letters or digits
    if not account_number.isdigit():
        messagebox.showinfo("Account Creation Failed", "Account number should only contain numbers.")
        window.destroy()
        return
    # Check if the account name already exists
    if if_account_name_exists(name):
        messagebox.showinfo("Account Creation Failed",
                            "Account name already exists. Please choose a different account name.")
        window.destroy()
        return

    # Check if the account number already exists
    if if_account_number_exists(account_number):
        messagebox.showinfo("Account Creation Failed",
                            "Account number already exists. Please choose a different account number.")
        window.destroy()
        return

    # Write the new account details to the file
    with open("accounts.txt", "a", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([name, account_number, balance])

    window.destroy()
    open_success_screen()


# Function for checking if the account name entered already exists or not.
def if_account_name_exists(name):
    with open("accounts.txt", "r", newline="") as file:
        reader = csv.reader(file)
        for details in reader:
            if details and details[0] == name:
                return True
    return False


# Function for checking if the account number already exists or not.
def if_account_number_exists(account_number):
    with open("accounts.txt", "r", newline="") as file:
        reader = csv.reader(file)
        for details in reader:
            if details and details[1] == account_number:
                return True
    return False


# Function for opening the account created successfully screen if the user creates a new valid account.
def open_success_screen():
    window = Toplevel()
    window.title("Success")
    # Load the image into the window
    image = Image.open(r'C:\Users\yocom\PycharmProjects\simpleBankSystem\success.jpg')
    # Resize the image to a smaller size
    image = image.resize((300, 150))
    photo = ImageTk.PhotoImage(image)
    # Adding the labels and buttons to the window
    tk.Label(window, image=photo).pack(pady=20)

    tk.Label(window, text="New account created successfully!", font=("Helvetica", 16, "bold")).pack(pady=20)

    tk.Button(window, text="Back", font=("Helvetica", 12), command=window.destroy).pack(pady=10)
    tk.Button(window, text="Exit", font=("Helvetica", 12), command=window.destroy).pack(pady=10)

    window.mainloop()


# Function for opening the existing user window. This window opens if a user selects existing
# customer on the main screen.
def open_existing_customer_window():
    # Using Toplevel and creating new window, so I can call to destroy it later
    customer_window = tk.Toplevel()
    customer_window.title("Existing Customer")
    # Adding labels, text entry boxes, and buttons.
    tk.Label(customer_window, text="Existing Customer", font=("Helvetica", 16, "bold")).pack(pady=20)

    account_number_label = tk.Label(customer_window, text="Account Number:", font=("Helvetica", 12))
    account_number_entry = tk.Entry(customer_window, font=("Helvetica", 12))

    account_number_label.pack()
    account_number_entry.pack(pady=10)

    tk.Button(customer_window, text="Verify Account", font=("Helvetica", 12),
              command=lambda: verify_account(account_number_entry.get(), customer_window)).pack(pady=10)
    tk.Button(customer_window, text="Back", font=("Helvetica", 12), command=customer_window.destroy).pack(pady=10)
    tk.Button(customer_window, text="Exit", font=("Helvetica", 12), command=customer_window.destroy).pack(pady=10)

    customer_window.mainloop()


# Function to verify the account number the user enters into the existing customer screen.
def verify_account(account_number, customer_window):
    # Destroying previous window
    customer_window.destroy()
    with open("accounts.txt", "r", newline="") as file:
        reader = csv.reader(file)
        for details in reader:
            if len(details) >= 2 and details[1] == account_number:
                balance = float(details[2].strip())
                show_balance(account_number, balance)
                return

        messagebox.showinfo("Account Verification Failed", "Account not found")


# Function for showing the account balance once the account number is verified. Also adds the withdrawal and deposit
# buttons.
def show_balance(account_number, balance):
    # Using Top level again, so I can destroy this window later.
    balance_window = tk.Toplevel()
    balance_window.title("Account Balance")

    tk.Label(balance_window, text=f"Account Number: {account_number}", font=("Helvetica", 14, "bold")).pack(pady=20)
    tk.Label(balance_window, text=f"Balance: {balance}", font=("Helvetica", 12)).pack(pady=10)

    tk.Button(balance_window, text="Deposit", font=("Helvetica", 12),
              command=lambda: open_transaction_window(account_number, "Deposit", balance_window)).pack(pady=10)
    tk.Button(balance_window, text="Withdrawal", font=("Helvetica", 12),
              command=lambda: open_transaction_window(account_number, "Withdrawal", balance_window)).pack(pady=10)
    tk.Button(balance_window, text="Back", font=("Helvetica", 12), command=balance_window.destroy).pack(pady=10)

    balance_window.mainloop()


# Function for opening the transaction window that lets a user either deposit or withdrawal an account.
def open_transaction_window(account_number, transaction_type, balance_window):
    # Destroy previous window
    balance_window.destroy()
    transaction_window = tk.Toplevel()
    transaction_window.title(transaction_type)
    # Transaction_type is defined in function "perform_transaction" the type is either deposit or withdrawal
    tk.Label(transaction_window, text=transaction_type, font=("Helvetica", 16, "bold")).pack(pady=20)

    amount_label = tk.Label(transaction_window, text="Amount:", font=("Helvetica", 12))
    amount_entry = tk.Entry(transaction_window, font=("Helvetica", 12))

    amount_label.pack()
    amount_entry.pack(pady=10)

    tk.Button(transaction_window, text=transaction_type, font=("Helvetica", 12),
              command=lambda: perform_transaction(account_number, transaction_type, amount_entry.get(),
                                                  transaction_window)).pack(
        pady=10)
    tk.Button(transaction_window, text="Back", font=("Helvetica", 12), command=transaction_window.destroy).pack(pady=10)


# Function for performing the transaction that open_transaction_window function uses.
def perform_transaction(account_number, transaction_type, amount, transaction_window):
    with open("accounts.txt", "r", newline="") as file:
        reader = csv.reader(file)
        accounts = list(reader)

    for index, details in enumerate(accounts):
        if len(details) >= 2 and details[1] == account_number:
            balance = float(details[2].strip())
            # First check for withdrawal if not withdrawal then it goes to deposit.
            if transaction_type == "Withdrawal":
                # Exception handler to check user input and ensure it's valid.
                try:
                    amount = float(amount)
                except ValueError:
                    messagebox.showinfo("Invalid Input", "Please enter a valid amount.")
                    return
                # Exception handler if a user tries to overdraft their account
                if float(amount) > balance:
                    messagebox.showinfo("Transaction Failed", "Insufficient funds")
                    return
                else:
                    balance -= float(amount)
                    details[2] = str(balance)
            else:  # If a user wants to deposit the code iterates to this section
                # Exception handler to check user input and ensure it's valid.
                try:
                    amount = float(amount)
                except ValueError:
                    messagebox.showinfo("Invalid Input", "Please enter a valid amount.")
                    return
                balance += float(amount)
                details[2] = str(balance)
            accounts[index] = details

            # Write the updated account details back to the file
            with open("accounts.txt", "w", newline="") as file:
                writer = csv.writer(file)
                writer.writerows(accounts)

            transaction_window.destroy()

            messagebox.showinfo("Transaction Successful", f"{transaction_type} successful")
            return

    messagebox.showinfo("Account Not Found", "Account not found")


open_welcome_screen()
